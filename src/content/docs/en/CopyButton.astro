---
import { Icon } from "astro-icon";
---

<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"
></script>
<html>
  <button
    id="copyBtn"
    class="copyButton"
    onclick="navigator.clipboard.writeText(document.getElementById('textToCopy').textContent.trim())"
  >
    <div class="contents">
      <Icon class="icon" name="mdi:clipboard-file-outline" />
      <div>
        <span class="topText">Import Code.</span>
        <span class="bottomText">Click to Copy.</span>
      </div>
    </div>
  </button>


  <div id="textToCopy" class="slotText"><slot /></div>

  <style>
    .copyButton {
      /* add the animation, but pause it by default */
      animation: spin 5s infinite linear paused;

      /**
   * Using `background-origin` we can create a “border” using two gradients. And to
   * make the gradients better-looking, we use OKLCH.
   *
   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin
   * @see https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl
   */
   background:
  linear-gradient(
    to bottom,
    rgba(8, 1, 75),
    rgba(14, 0, 138)
   
  )
  padding-box,
  conic-gradient(
    from var(--bg-angle) at 50%,
    rgba(255, 0, 0, 0.95),
    rgba(255, 255, 0, 0.95),
    rgba(0, 255, 0, 0.95),
    rgba(0, 255, 255, 0.95),
    rgba(0, 0, 255, 0.95),
    rgba(255, 0, 255, 0.95)
  )
  border-box;

      /* a clear border lets the background gradient shine through */
      border: 6px solid transparent;
      
      width: 400px;
      margin-left: 20%;
    }
    .copyButton:hover {
      animation-play-state: running;
    }
    .copyButton:active {
      background: rgb(8, 1, 75);
    }
    .contents {
      color: #ffffff !important;
      text-decoration: none;
      font-weight: 600;
      font: inherit;
      display: flex;
      flex-direction: row-reverse;
      flex-wrap: nowrap;
    }
    .icon {
      display: block;
      height: 75px;
      margin-left: 3rem;
      margin-right: 3rem;
      color: rgb(238, 255, 0);
    }

    .topText {
      font-weight: 600 !important;

      color: rgb(238, 255, 0);
      padding: 10px;
      font-size: 30px;
    }

    .bottomText {
      font-style: normal;
      font-weight: 400;
      color: rgb(238, 255, 0);
      font-size: 15px;

      padding: 10px;
    }
    .slotText {
      visibility: hidden;
      overflow: hidden;
    }

    /**
 * `@property` is required for the animation to work.
 * Without it, the angle values won’t interpolate properly.
 *
 * @see https://dev.to/afif/we-can-finally-animate-css-gradient-kdk
 */
    @property --bg-angle {
      inherits: false;
      initial-value: 0deg;
      syntax: "<angle>";
    }

    /**
 * To animate the gradient, we set the custom property to 1 full
 * rotation. The animation starts at the default value of `0deg`.
 */
    @keyframes spin {
      to {
        --bg-angle: 360deg;
      }
    }
  </style>
</html>
